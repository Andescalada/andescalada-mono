generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

generator enum {
  provider = "node node_modules/prisma-enum-generator"
  output   = "../packages/db/modelEnums"
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "../packages/db/zod"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id                    String       @id @default(uuid())
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  name                  String
  username              String       @unique
  email                 String       @unique
  profilePhoto          Image?       @relation(fields: [profilePhotoId], references: [id])
  profilePhotoId        String?
  firstLogin            Boolean      @default(true)
  auth0id               String?
  authorSector          Sector[]     @relation("AuthorSector")
  coAuthorSector        Sector[]     @relation("CoAuthorSector")
  authorWall            Wall[]       @relation("AuthorWall")
  coAuthorWall          Wall[]       @relation("CoAuthorWall")
  authorRoute           Route[]      @relation("AuthorRoute")
  authorTopo            Topo[]       @relation("AuthorTopo")
  coAuthorTopo          Topo[]       @relation("CoAuthorTopo")
  coAuthorRoute         Route[]      @relation("CoAuthorRoute")
  authorRoutePath       RoutePath[]  @relation("AuthorRoutePath")
  coAuthorRoutePath     RoutePath[]  @relation("CoAuthorRoutePath")
  RoleByZone            RoleByZone[]
  preferredSportGrade   GradeSystems @default(French)
  preferredTradGrade    GradeSystems @default(Yosemite)
  preferredBoulderGrade GradeSystems @default(Hueco)
  AssignedRoles         RoleByZone[] @relation("AssignedBy")

  @@index([email])
  @@index([profilePhotoId])
  @@fulltext([username])
}

enum GradeSystems {
  French
  Yosemite
  Hueco
  Ice
  Mixed
}

model RoleByZone {
  id           String @id @default(uuid())
  User         User   @relation(fields: [userId], references: [id])
  userId       String
  Zone         Zone   @relation(fields: [zoneId], references: [id])
  zoneId       String
  Role         Role   @relation(fields: [roleId], references: [id])
  roleId       String
  AssignedBy   User   @relation("AssignedBy", fields: [assignedById], references: [id])
  assignedById String

  @@index([id])
  @@index([assignedById])
  @@index([userId, zoneId, roleId])
}

model Role {
  id          String        @id @default(uuid())
  name        RoleNames     @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  permissions Permissions[]

  RoleByZone RoleByZone[]

  @@index([id])
  @@index([name])
}

enum RoleNames {
  Admin
  Collaborator
  Editor
  Reader
}

model Permissions {
  id        String            @id @default(uuid())
  action    PermissionActions @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  roles     Role[]

  @@index([id])
  @@index([action])
}

enum PermissionActions {
  Create
  Update
  Read
  Delete
  GrantAccess
  RevokeAccess
  DenyAccess
}

model Zone {
  id         String       @id @default(uuid())
  name       String
  slug       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  infoAccess InfoAccess   @default(Public)
  sectors    Sector[]
  photos     Image[]
  RoleByZone RoleByZone[]
}

model Sector {
  id        String   @id @default(uuid())
  name      String
  slug      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  position  Int      @default(0)
  Zone      Zone     @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  zoneId    String
  walls     Wall[]
  Author    User     @relation("AuthorSector", fields: [authorId], references: [id])
  authorId  String
  coAuthors User[]   @relation("CoAuthorSector")

  @@index([zoneId])
  @@index([authorId])
}

model Wall {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  slug      String
  position  Int      @default(0)
  Sector    Sector   @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  sectorId  String
  topos     Topo[]
  routes    Route[]
  Author    User     @relation("AuthorWall", fields: [authorId], references: [id])
  authorId  String
  coAuthors User[]   @relation("CoAuthorWall")

  @@index([sectorId])
  @@index([authorId])
}

model Topo {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  slug      String
  Wall      Wall        @relation(fields: [wallId], references: [id])
  wallId    String
  position  Int         @default(0)
  main      Boolean     @default(false)
  name      String?
  RoutePath RoutePath[]
  canvas    String?     @db.LongText
  image     Image       @relation(fields: [imageId], references: [id])
  imageId   String
  Author    User        @relation("AuthorTopo", fields: [authorId], references: [id])
  authorId  String
  coAuthors User[]      @relation("CoAuthorTopo")

  @@index([wallId])
  @@index([imageId])
  @@index([authorId])
}

model Route {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  slug         String
  position     Int         @default(0)
  leftRouteId  String?
  rightRouteId String?
  classic      Boolean     @default(false)
  kind         RouteKind
  Wall         Wall        @relation(fields: [wallId], references: [id], onDelete: Cascade)
  wallId       String
  description  String?     @db.LongText
  RoutePath    RoutePath[]
  RouteGrade   RouteGrade?
  Author       User        @relation("AuthorRoute", fields: [authorId], references: [id])
  authorId     String
  coAuthors    User[]      @relation("CoAuthorRoute")

  @@index([wallId])
  @@index([authorId])
}

model RouteGrade {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  grade      Int?
  project    Boolean  @default(false)
  slashGrade Boolean  @default(false)
  route      Route    @relation(fields: [routeId], references: [id])
  routeId    String   @unique

  @@index([routeId])
}

model RoutePath {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  path      String   @db.LongText
  Topo      Topo     @relation(fields: [topoId], references: [id], onDelete: Cascade)
  topoId    String
  Route     Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId   String
  Author    User     @relation("AuthorRoutePath", fields: [authorId], references: [id])
  authorId  String
  coAuthors User[]   @relation("CoAuthorRoutePath")

  @@index([topoId])
  @@index([routeId])
  @@index([authorId])
}

model Image {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  height         Int
  width          Int
  url            String         @db.LongText
  storageService StorageService
  bytes          BigInt?
  publicId       String?        @db.MediumText
  version        BigInt?
  assetId        String?        @db.MediumText
  format         String?
  Topo           Topo[]
  User           User[]
  Zone           Zone?          @relation(fields: [zoneId], references: [id])
  zoneId         String?
}

enum InfoAccess {
  Public
  Community
  Private
}

enum RouteKind {
  Sport
  Trad
  Boulder
  Mixed
  Ice
}

enum StorageService {
  Cloudinary
}
