generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

generator zod {
  provider = "prisma-zod-generator"
  output   = "../zod"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.pdf"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                         String                    @id @default(uuid())
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
  name                       String
  username                   String                    @unique
  email                      String                    @unique
  profilePhoto               Image?                    @relation(fields: [profilePhotoId], references: [id])
  profilePhotoId             String?
  firstLogin                 Boolean                   @default(true)
  auth0id                    String?
  authorSector               Sector[]                  @relation("AuthorSector")
  coAuthorSector             Sector[]                  @relation("CoAuthorSector")
  authorWall                 Wall[]                    @relation("AuthorWall")
  coAuthorWall               Wall[]                    @relation("CoAuthorWall")
  authorRoute                Route[]                   @relation("AuthorRoute")
  coAuthorRoute              Route[]                   @relation("CoAuthorRoute")
  authorTopo                 Topo[]                    @relation("AuthorTopo")
  coAuthorTopo               Topo[]                    @relation("CoAuthorTopo")
  authorRoutePath            RoutePath[]               @relation("AuthorRoutePath")
  coAuthorRoutePath          RoutePath[]               @relation("CoAuthorRoutePath")
  authorMultiPitch           MultiPitch[]              @relation("AuthorMultiPitch")
  coAuthorMultiPitch         MultiPitch[]              @relation("CoAuthorMultiPitch")
  RoleByZone                 RoleByZone[]
  preferredSportGrade        GradeSystems              @default(French)
  preferredTradGrade         GradeSystems              @default(Yosemite)
  preferredBoulderGrade      GradeSystems              @default(Hueco)
  AssignedRoles              RoleByZone[]              @relation("AssignedBy")
  isDeleted                  SoftDelete                @default(NotDeleted)
  FavoriteZones              Zone[]                    @relation("FavoriteZones")
  DownloadedZones            Zone[]                    @relation("DownloadedZones")
  History                    History[]
  AuthorAgreements           Agreement[]               @relation("AuthorAgreements")
  coAuthorAgreements         Agreement[]               @relation("CoAuthorAgreements")
  AuthorZoneListAgreements   ZoneAgreement[]           @relation("AuthorZoneAgreements")
  coAuthorZoneListAgreements ZoneAgreement[]           @relation("CoAuthorZoneAgreements")
  ZoneStatusModifications    ZoneStatus[]
  NotificationSent           NotificationSender[]      @relation("Sender")
  NotificationReceived       NotificationReceiver[]    @relation("Receiver")
  ZoneAccessRequestHistory   ZoneAccessRequest[]
  ZoneAccessRequestReviewed  ZoneAccessRequest[]       @relation("ZoneAccessRequestModifiedBy")
  UserZoneAgreementHistory   UserZoneAgreementRecord[]

  @@index([email])
  @@index([profilePhotoId])
  @@fulltext([username])
}

model History {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [email], references: [email])
  email     String
  zone      Zone?      @relation(fields: [zoneId], references: [id])
  zoneId    String?
  action    Actions
  counter   Int        @default(0)
  isDeleted SoftDelete @default(NotDeleted)

  @@unique([email, zoneId, action], name: "history_unique")
  @@index([email])
  @@index([zoneId])
}

enum Actions {
  Downloaded
  Favorited
  Recent
  Visited
}

enum GradeSystems {
  French
  Yosemite
  Hueco
  Ice
  Mixed
  Aid
}

model RoleByZone {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  User         User       @relation(fields: [userId], references: [id])
  userId       String
  Zone         Zone       @relation(fields: [zoneId], references: [id])
  zoneId       String
  Role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  AssignedBy   User       @relation("AssignedBy", fields: [assignedById], references: [id])
  assignedById String
  isDeleted    SoftDelete @default(NotDeleted)
  version      Int        @default(0)

  @@index([id])
  @@index([assignedById])
  @@index([userId, zoneId, roleId])
  @@index([zoneId])
  @@index([roleId])
}

model UserZoneAgreementRecord {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  Zone             Zone     @relation(fields: [zoneId], references: [id])
  zoneId           String
  User             User     @relation(fields: [userId], references: [id])
  userId           String
  hasAgreed        Boolean
  agreementsRecord String   @db.LongText

  @@index([zoneId])
  @@index([userId])
}

model Role {
  id          String        @id @default(uuid())
  name        RoleNames     @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  permissions Permissions[]

  RoleByZone RoleByZone[]

  @@index([id])
  @@index([name])
}

enum RoleNames {
  Admin
  Collaborator
  Editor
  Reader
  Reviewer
  Member
}

model Permissions {
  id        String            @id @default(uuid())
  action    PermissionActions @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  roles     Role[]
  isDeleted SoftDelete        @default(NotDeleted)

  @@index([id])
  @@index([action])
}

enum PermissionActions {
  Create
  Update
  Read
  Delete
  GrantAccess
  RevokeAccess
  DenyAccess
  PublishZone
  PauseZonePublication
  UnpublishZone
  ApproveZone
  RejectZone
  RequestZoneReview
  AssignZoneRole
  RevokeZoneRole
  EditZoneAgreements
}

model ZoneAccessRequest {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  Zone         Zone          @relation(fields: [zoneId], references: [id])
  zoneId       String
  User         User          @relation(fields: [userId], references: [id])
  userId       String
  status       RequestStatus
  modifiedBy   User          @relation("ZoneAccessRequestModifiedBy", fields: [modifiedById], references: [id])
  modifiedById String
  message      TextContent?  @relation(fields: [messageId], references: [id])
  messageId    String?

  @@index([zoneId])
  @@index([userId])
  @@index([modifiedById])
  @@index([messageId])
}

enum RequestStatus {
  Pending
  Accepted
  Rejected
  Paused
}

model Zone {
  id                       String                    @id @default(uuid())
  name                     String
  slug                     String
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  infoAccess               InfoAccess                @default(Public)
  sectors                  Sector[]
  photos                   Image[]
  RoleByZone               RoleByZone[]
  isDeleted                SoftDelete                @default(NotDeleted)
  version                  Int                       @default(0)
  FavoritedBy              User[]                    @relation("FavoriteZones")
  DownloadedBy             User[]                    @relation("DownloadedZones")
  History                  History[]
  agreements               ZoneAgreement[]
  Location                 Location?                 @relation(fields: [locationId], references: [id])
  locationId               String?
  currentStatus            Status                    @default(Unpublished)
  statusHistory            ZoneStatus[]
  ZoneAccessRequest        ZoneAccessRequest[]
  UserZoneAgreementHistory UserZoneAgreementRecord[]

  @@index([locationId])
}

model ZoneStatus {
  id            String       @id @default(uuid())
  status        Status
  message       TextContent? @relation(fields: [textContentId], references: [id])
  createdAt     DateTime     @default(now())
  Zone          Zone[]
  textContentId String?
  modifiedBy    User         @relation(fields: [modifiedById], references: [id])
  modifiedById  String

  @@index([textContentId])
  @@index([modifiedById])
}

enum Status {
  Paused
  Published
  Rejected
  Approved
  InReview
  Unpublished
}

model ZoneAgreement {
  id          String         @id @default(uuid())
  position    Int            @default(0)
  comment     TextContent?   @relation(fields: [commentId], references: [id])
  commentId   String?
  level       AgreementLevel @default(Recommended)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Zone        Zone           @relation(fields: [zoneId], references: [id])
  zoneId      String
  Agreement   Agreement      @relation(fields: [agreementId], references: [id])
  agreementId String
  isDeleted   SoftDelete     @default(NotDeleted)
  version     Int            @default(0)
  Author      User           @relation("AuthorZoneAgreements", fields: [authorId], references: [id])
  authorId    String
  coAuthors   User[]         @relation("CoAuthorZoneAgreements")

  @@index([zoneId])
  @@index([agreementId])
  @@index([authorId])
  @@index([commentId])
}

model Agreement {
  id            String            @id @default(uuid())
  title         TextContent       @relation("AgreementName", fields: [titleId], references: [id])
  titleId       String
  description   TextContent       @relation("AgreementDescription", fields: [descriptionId], references: [id])
  descriptionId String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  Author        User              @relation("AuthorAgreements", fields: [authorId], references: [id])
  authorId      String
  coAuthors     User[]            @relation("CoAuthorAgreements")
  isDeleted     SoftDelete        @default(NotDeleted)
  version       Int               @default(0)
  classic       ClassicAgreement?
  icon          String?
  ZoneAgreement ZoneAgreement[]

  @@index([authorId])
  @@index([titleId])
  @@index([descriptionId])
}

enum ClassicAgreement {
  Toilet
  Fire
  Camping
  Pets
  Payment
}

enum AgreementLevel {
  Critical
  Important
  Recommended
  NotAplicable
}

model Sector {
  id         String     @id @default(uuid())
  name       String
  slug       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  position   Int        @default(0)
  Zone       Zone       @relation(fields: [zoneId], references: [id], onDelete: Cascade)
  zoneId     String
  singleWall Boolean    @default(false)
  walls      Wall[]
  Author     User       @relation("AuthorSector", fields: [authorId], references: [id])
  authorId   String
  coAuthors  User[]     @relation("CoAuthorSector")
  isDeleted  SoftDelete @default(NotDeleted)
  version    Int        @default(0)

  @@index([zoneId])
  @@index([authorId])
}

model Wall {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String
  slug      String
  position  Int          @default(0)
  Sector    Sector       @relation(fields: [sectorId], references: [id], onDelete: Cascade)
  sectorId  String
  topos     Topo[]
  routes    Route[]
  Author    User         @relation("AuthorWall", fields: [authorId], references: [id])
  authorId  String
  coAuthors User[]       @relation("CoAuthorWall")
  isDeleted SoftDelete   @default(NotDeleted)
  version   Int          @default(0)
  MuliPitch MultiPitch[]

  @@index([sectorId])
  @@index([authorId])
}

model Topo {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  slug      String
  Wall      Wall        @relation(fields: [wallId], references: [id])
  wallId    String
  position  Int         @default(0)
  main      Boolean     @default(false)
  name      String?
  RoutePath RoutePath[]
  canvas    String?     @db.LongText
  image     Image       @relation(fields: [imageId], references: [id])
  imageId   String
  Author    User        @relation("AuthorTopo", fields: [authorId], references: [id])
  authorId  String
  coAuthors User[]      @relation("CoAuthorTopo")
  isDeleted SoftDelete  @default(NotDeleted)
  version   Int         @default(0)

  @@index([wallId])
  @@index([imageId])
  @@index([authorId])
}

model Route {
  id              String      @id @default(uuid())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  name            String
  slug            String
  unknownName     Boolean     @default(false)
  position        Int         @default(0)
  leftRouteId     String?
  rightRouteId    String?
  classic         Boolean     @default(false)
  kind            RouteKind
  Wall            Wall        @relation(fields: [wallId], references: [id], onDelete: Cascade)
  wallId          String
  description     String?     @db.LongText
  RoutePath       RoutePath[]
  RouteGrade      RouteGrade?
  Author          User        @relation("AuthorRoute", fields: [authorId], references: [id])
  authorId        String
  coAuthors       User[]      @relation("CoAuthorRoute")
  isDeleted       SoftDelete  @default(NotDeleted)
  version         Int         @default(0)
  extendedRouteId String?
  ExtendedRoute   Route?      @relation("ExtensionOf", fields: [extendedRouteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Extension       Route[]     @relation("ExtensionOf")
  isVariant       Boolean?    @default(false)
  variantRouteId  String?
  VariantRoute    Route?      @relation("VariantOf", fields: [variantRouteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Variant         Route[]     @relation("VariantOf")
  Pitch           Pitch?

  @@index([wallId])
  @@index([authorId])
  @@index([extendedRouteId])
  @@index([variantRouteId])
}

model MultiPitch {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  slug        String
  Pitches     Pitch[]
  kind        RouteKind
  Wall        Wall       @relation(fields: [wallId], references: [id], onDelete: Cascade)
  wallId      String
  description String?    @db.LongText
  Author      User       @relation("AuthorMultiPitch", fields: [authorId], references: [id])
  authorId    String
  coAuthors   User[]     @relation("CoAuthorMultiPitch")
  isDeleted   SoftDelete @default(NotDeleted)
  version     Int        @default(0)

  @@index([wallId])
  @@index([authorId])
}

model Pitch {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  number         Decimal     @db.Decimal(5, 2)
  Route          Route       @relation(fields: [routeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  routeId        String      @unique
  MuliPitch      MultiPitch? @relation(fields: [muliPitchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  muliPitchId    String?
  isDeleted      SoftDelete  @default(NotDeleted)
  version        Int         @default(0)
  variantPitchId String?
  VariantPitch   Pitch?      @relation("VariantPitchOf", fields: [variantPitchId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Variant        Pitch[]     @relation("VariantPitchOf")

  @@index([muliPitchId])
  @@index([variantPitchId])
}

model RouteGrade {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  grade      Int?
  project    Boolean    @default(false)
  slashGrade Boolean    @default(false)
  route      Route      @relation(fields: [routeId], references: [id])
  routeId    String     @unique
  isDeleted  SoftDelete @default(NotDeleted)
  version    Int        @default(0)

  @@index([routeId])
}

model RoutePath {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  path      String     @db.LongText
  Topo      Topo       @relation(fields: [topoId], references: [id], onDelete: Cascade)
  topoId    String
  Route     Route      @relation(fields: [routeId], references: [id], onDelete: Cascade)
  routeId   String
  Author    User       @relation("AuthorRoutePath", fields: [authorId], references: [id])
  authorId  String
  coAuthors User[]     @relation("CoAuthorRoutePath")
  isDeleted SoftDelete @default(NotDeleted)
  version   Int        @default(0)

  @@index([topoId])
  @@index([routeId])
  @@index([authorId])
}

model Image {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  height         Int
  width          Int
  url            String         @db.LongText
  storageService StorageService
  bytes          BigInt?
  publicId       String?        @db.MediumText
  version        BigInt?
  assetId        String?        @db.MediumText
  format         String?
  Topo           Topo[]
  User           User[]
  Zone           Zone?          @relation(fields: [zoneId], references: [id])
  zoneId         String?
  isDeleted      SoftDelete     @default(NotDeleted)

  @@index([zoneId])
}

enum InfoAccess {
  Public
  Community
  Private
}

enum RouteKind {
  Sport
  Trad
  Boulder
  Mixed
  Ice
  Aid
}

enum StorageService {
  Cloudinary
}

enum SoftDelete {
  DeletedPrivate
  DeletedPublic
  DeletedDev
  NotDeleted
}

model TextContent {
  id                   String              @id @default(uuid())
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  originalText         String              @db.LongText
  originalLang         Language            @relation(fields: [languageId], references: [languageId])
  languageId           String
  isDeleted            SoftDelete          @default(NotDeleted)
  Translation          Translation[]
  AgreementName        Agreement[]         @relation("AgreementName")
  AgreementDescription Agreement[]         @relation("AgreementDescription")
  ZoneAgreementComment ZoneAgreement[]
  ZoneStatus           ZoneStatus[]
  ZoneAccessRequest    ZoneAccessRequest[]

  @@index([languageId])
}

model Translation {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  textContent   TextContent @relation(fields: [textContentId], references: [id])
  textContentId String
  translation   String      @db.LongText
  isDeleted     SoftDelete  @default(NotDeleted)
  language      Language    @relation(fields: [languageId], references: [languageId])
  languageId    String

  @@index([textContentId])
  @@index([languageId])
}

model Language {
  languageId   String        @id @unique
  languageName String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isDeleted    SoftDelete    @default(NotDeleted)
  TextContent  TextContent[]
  Translation  Translation[]

  @@index([languageId])
}

model Location {
  id        String     @id @default(uuid())
  latitude  Decimal    @db.Decimal(10, 8)
  longitude Decimal    @db.Decimal(11, 8)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  isDeleted SoftDelete @default(NotDeleted)
  note      String?    @db.LongText
  radius    Decimal?
  Zone      Zone[]
}

model NotificationReceiver {
  id                   String             @id @default(uuid())
  Object               NotificationObject @relation(fields: [notificationObjectId], references: [id])
  notificationObjectId String
  Receiver             User               @relation("Receiver", fields: [receiverId], references: [id])
  receiverId           String
  isRead               Boolean            @default(false)

  @@index([notificationObjectId])
  @@index([receiverId])
}

model NotificationObject {
  id                   String                 @id @default(uuid())
  entityId             String
  Entity               Entity
  NotificationReceiver NotificationReceiver[]
  NotificationSender   NotificationSender[]
  entityTypeId         EntityTypeId
  createdAt            DateTime               @default(now())
  messageSent          String

  @@index([entityTypeId])
}

model NotificationSender {
  id                   String             @id @default(uuid())
  Object               NotificationObject @relation(fields: [notificationObjectId], references: [id])
  notificationObjectId String
  Sender               User               @relation("Sender", fields: [senderId], references: [id])
  senderId             String

  @@index([notificationObjectId])
  @@index([senderId])
}

enum EntityTypeId {
  RequestZoneReview
  RequestZoneAccess
  ZoneReviewAssigned
  ApproveZoneReview
  RejectZoneReview
  PublishZoneByAdmin
  PausePublicationByAdmin
  UnpublishZoneByReviewer
  ApproveZoneAccess
  AssignNewZoneRole
}

enum Entity {
  Zone
}
